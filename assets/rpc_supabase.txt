-- Criação da stored procedure que pega todos os eventos em que o project.user_id = parametro fornecido (id do usuário)

CREATE OR REPLACE FUNCTION get_project_summary(parametro_id BIGINT)
RETURNS TABLE (
    project_name VARCHAR(30),
    project_id BIGINT,
    event_id BIGINT,
    subtotal NUMERIC(9,2)
) AS $$
BEGIN
    -- Atualiza o campo estimated_price para cada projeto do usuário
    UPDATE project
    SET estimated_price = COALESCE(subquery.total, 0)
    FROM (
        SELECT 
            p.id AS project_id,
            SUM(si.price * pi.qty) AS total
        FROM project p
        LEFT JOIN project_item pi ON p.id = pi.project_id
        LEFT JOIN supplier_item si ON pi.product_id = si.id
        WHERE p.user_id = parametro_id
        GROUP BY p.id
    ) AS subquery
    WHERE project.id = subquery.project_id;

    -- Retorna a tabela com os detalhes solicitados
    RETURN QUERY
    SELECT 
        p.name AS project_name,
        p.id AS project_id,
        p.id AS event_id,
        COALESCE(SUM(si.price * pi.qty), 0) AS subtotal
    FROM project p
    LEFT JOIN project_item pi ON p.id = pi.project_id
    LEFT JOIN supplier_item si ON pi.product_id = si.id
    WHERE p.user_id = parametro_id
    GROUP BY p.id, p.name;
END;
$$ LANGUAGE plpgsql;

select * from get_project_summary(10);

/*FUNCIONAAAAAAAAAAAAAAAA*/
/* 100% confiável */











-- criação da stored procedure que pega o id do usuário autenticado
CREATE OR REPLACE FUNCTION get_app_user_id(parametro_uuid uuid)
RETURNS TABLE(id bigint) AS $$
BEGIN
    RETURN QUERY
    SELECT app_user.id
    FROM app_user
    WHERE app_user.user_uuid = parametro_uuid;
END;
$$ LANGUAGE plpgsql;

/* funciona, é 100% confiável */










create or replace function public.filter_products(filtro_produtos text default null)
returns table(
    product_id bigint,
    supplier_id bigint,
    supplier_company varchar,
    nameproduct varchar,
    descproduct varchar,
    price numeric,
    product_url text,
    category varchar,
    qty_in_store smallint
)
language sql
as $$
  select 
    si.id as product_id,
    si.supplier_id,
    sd.company_name as supplier_company,
    si.nameproduct,
    si.descproduct,
    si.price,
    si.product_url,
    si.category,
    si.qty_in_store
  from 
    public.supplier_item si
  join 
    public.supplier_details sd
  on 
    si.supplier_id = sd.id
  where 
    filtro_produtos is null or si.nameproduct ilike '%' || filtro_produtos || '%';
$$;

-- select * from public.filter_products();
-- select * from public.filter_products('filtro');

-- FUNCIONA PERFEITAMENTE














create or replace function create_project(
    name text,
    event_date date,
    parametro_user_uuid uuid
) returns void as $$
declare
    user_id bigint;
begin
    -- Obter o user_id com base no parametro_user_uuid
    select id
    into user_id
    from public.app_user
    where user_uuid = parametro_user_uuid;

    -- Verificar se o user_id foi encontrado
    if user_id is null then
        raise exception 'Usuário não encontrado para o UUID fornecido';
    end if;

    -- Inserir o projeto na tabela project
    insert into public.project (user_id, name, event_date)
    values (user_id, name, event_date);
end;
$$ language plpgsql;

-- select create_project('Nome do Projeto', '2024-12-25', '7a17b063-2f39-4030-bc51-863d35f5607d');

/* funciona perfeitamente */




















create or replace function get_user_projects(parametro_uuid uuid)
returns table (
    project_id bigint,
    project_name varchar(30),
    estimated_price numeric(9,2),
    event_date date,
    created_at timestamp,
    updated_at timestamp,
    city text,
    postal_code text,
    house_number text
) as $$
declare
    user_id_var bigint; -- Variável para armazenar o ID do usuário
begin
    -- Busca o ID do usuário correspondente ao user_uuid fornecido
    select id into user_id_var
    from public.app_user
    where user_uuid = parametro_uuid;

    -- Retorna os projetos e informações do endereço associados ao usuário
    return query
    select 
        p.id as project_id,
        p.name as project_name,
        p.estimated_price,
        p.event_date,
        p.created_at,
        p.updated_at,
        a.city,
        a.postal_code,
        a.house_number
    from public.project p
    left join public.address a on p.id = a.project_id
    where p.user_id = user_id_var;

end;
$$ language plpgsql;

-- select * from get_user_projects('1e712402-3d74-49af-819d-dba7f8ab27e9');
-- select * from get_user_projects('uuid_do_usuario_aqui');

/* funciona */






















-- get_product_items /*esse código funciona perfeitamente, mas não quando está dentro de uma procedure*/
SELECT
'meu codigo' as my,
    pi.qty,
    pi.product_id,
    si.id AS supplier_item_id,
    si.nameproduct,
    si.price,
    si.product_url,
    si.descproduct,
    si.supplier_id,
    sd.company_name,
    sd.service_region
FROM project_item pi
INNER JOIN supplier_item si ON si.id = pi.product_id
inner join supplier_details sd ON sd.id = si.supplier_id
WHERE pi.project_id = 1; -- Substitua "1" pelo ID do projeto que deseja aplicar o filtro (`public`.`project`.`id`)













CREATE OR REPLACE FUNCTION add_or_increment_project_item(
    product_id_input bigint,
    project_id_input bigint,
    qty_input smallint
)
RETURNS void AS $$
BEGIN
    -- Verifica se o registro já existe
    IF EXISTS (
        SELECT 1
        FROM public.project_item
        WHERE product_id = product_id_input
        AND project_id = project_id_input
    ) THEN
        -- Incrementa a quantidade
        UPDATE public.project_item
        SET qty = qty + qty_input,
            updated_at = now()
        WHERE product_id = product_id_input
        AND project_id = project_id_input;
    ELSE
        -- Insere um novo registro
        INSERT INTO public.project_item (product_id, project_id, qty)
        VALUES (product_id_input, project_id_input, qty_input);
    END IF;
END;
$$ LANGUAGE plpgsql;
